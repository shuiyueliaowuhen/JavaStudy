package com.uni.demo;

import net.sourceforge.pinyin4j.PinyinHelper;
import net.sourceforge.pinyin4j.format.HanyuPinyinCaseType;
import net.sourceforge.pinyin4j.format.HanyuPinyinOutputFormat;
import net.sourceforge.pinyin4j.format.HanyuPinyinToneType;
import net.sourceforge.pinyin4j.format.HanyuPinyinVCharType;
import net.sourceforge.pinyin4j.format.exception.BadHanyuPinyinOutputFormatCombination;

import java.math.BigDecimal;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

public class Test {

    public static void main(String[] args) {

        String str1 ="4.52021275S\n" +
                "4.2/2020170Y-1\n" +
                "4.2/2019142Y-1\n" +
                "4.4/2021163S-1\n" +
                "4.9/2021325S\n" +
                "4.2/2018224Y\n" +
                "4.2/2021240S-2\n" +
                "4.3/2022058Y-3\n" +
                "4.4/2022116S\n" +
                "4.5/2020079S\n" +
                "4.4/2021162S\n" +
                "4.7/2022035S-2\n" +
                "4.2/2019154S-2\n" +
                "4.6/2020331S\n" +
                "4.2/2022212S-1\n" +
                "4.5/2022188Y-1\n" +
                "4.7/2022141S\n" +
                "4.1/2019017S-2\n" +
                "4.2/2019163S-2\n" +
                "4.2/2020061S-2\n" +
                "4.2/2021185S-2\n" +
                "4.5/2020390S\n" +
                "4.2/2022126S\n" +
                "4.4/2022063S\n" +
                "4.5/2019146S\n" +
                "4.2/2022219S-1-1\n" +
                "4.5/2022025S-1\n" +
                "4.2/2021030S\n" +
                "4.2/2020350S-1\n" +
                "4.2/2022125S\n" +
                "4.6/20202249Y\n" +
                "4.5/2021349S-1\n" +
                "4.2/2022099S\n" +
                "4.2/2021227S-2\n" +
                "4.9/2021291S-1\n" +
                "4.2/2022062S\n" +
                "4.5/2021317S\n" +
                "4.2/2020061S\n" +
                "4.3/2021620Y\n" +
                "4.5/2021307S-1\n" +
                "4.2/2020264S\n" +
                "4.2/2022028S\n" +
                "4.2/2021297S-1\n" +
                "4.2/2018213Y-1\n" +
                "4.4/2021061S\n" +
                "4.5/2018148S\n" +
                "4.5/2021351S-1\n" +
                "4.3/2018267Y-1\n" +
                "4.3/2021046S\n" +
                "4.2/2022027S\n" +
                "4.5/2022226S-1\n" +
                "4.2/2019701S-4\n" +
                "4.5/2017207S\n" +
                "4.2/2020221S\n" +
                "4.9/20220012S\n" +
                "4.5/2020028S\n" +
                "4.2/2021240S-3\n" +
                "4.2/2022276S-1\n" +
                "4.5/2021348S\n" +
                "4.4/2022247S-1\n" +
                "4.5/2022006S\n" +
                "4.9/2020053S\n" +
                "4.5/2022105S\n" +
                "4.4/2021340S\n" +
                "4.5/2020002S\n" +
                "4.4/2021251S\n" +
                "4.3/2022059Y\n" +
                "4.2/2021087Y\n" +
                "4.2/2022184S-1\n" +
                "4.4/2021341S\n" +
                "4.2/2021080Y\n" +
                "4.5/2019325S\n" +
                "4.5/2022191S-1\n" +
                "4.7/2020188S\n" +
                "4.2/2020161Y\n" +
                "4.6/2021354S\n" +
                "4.2/2019124S；4.2/2019125S-3\n" +
                "4.9/2021176S\n" +
                "4.2/2021350S\n" +
                "4.4/2021253S-2\n" +
                "4.2/2022161S-1\n" +
                "4.2/2019154S-1\n" +
                "4.5/2020140S\n" +
                "4.3/2021279S-1-1\n" +
                "4.5/2020184Y\n" +
                "4.9/2022053S\n" +
                "4.4/2022083S-1\n" +
                "4.5/2022025S-2\n" +
                "4.3/2020404S\n" +
                "4.7/2021289S-1\n" +
                "4.9/2021259Y-1\n" +
                "4.7/2020369S-1\n" +
                "4.1/2022198S-1\n" +
                "4.5/2021056S-10\n" +
                "4.2/2022143S-1\n" +
                "4.2/2022133S\n" +
                "4.5/2021273S\n" +
                "4.2/2021276S\n" +
                "4.9/2018065S-1\n" +
                "4.7/2018092Y\n" +
                "4.4/2021094S\n" +
                "4.7/2021074S\n" +
                "4.9/2022100S\n" +
                "4.5/2018075S-1\n" +
                "4.7/2021124S-2\n" +
                "4.4/2021158S\n" +
                "4.4/2022164S\n" +
                "4.2/2022168Y-1\n" +
                "4.5/2022104S\n" +
                "4.2/2018224Y-1\n" +
                "4.3/2019229S\n" +
                "4.5/2021110S\n" +
                "4.8/2015096S\n" +
                "4.2/2022253Y-1\n" +
                "4.2/2018213Y\n" +
                "4.2/2022078S-1\n" +
                "4.2/2020285S-1\n" +
                "4.2/2021226S\n" +
                "4.7/2022002S\n" +
                "4.6/2022088Y-5\n" +
                "4.2/2022011S\n" +
                "4.5/2021239S\n" +
                "4.6/2020288S\n" +
                "4.2/2022037S-4\n" +
                "4.3/2020095S\n" +
                "4.2/2020144S-5\n" +
                "4.3/2020055S-1\n" +
                "4.1/2022204S-1\n" +
                "4.3/2022058Y-1\n" +
                "4.2/2022102Y\n" +
                "4.9/2021192S\n" +
                "4.2/2021099S-5\n" +
                "4.3/2017240Y-2-1\n" +
                "4.7/2022029S\n" +
                "4.2/2017258S-1\n" +
                "4.2/2019122S-2\n" +
                "4.5/2020253S\n" +
                "4.3/2021329S\n" +
                "4.2/2020169S-3\n" +
                "4.4/2022179S-4\n" +
                "4.2/2022087S\n" +
                "4.7/2019088Y\n" +
                "4.5/2022239S-2\n" +
                "4.7/2018253S\n" +
                "4.2/2019048Y\n" +
                "4.7/2019309S-4\n" +
                "4.5/2020326Y\n" +
                "4.5/2019324S\n" +
                "4.5/2011156S-2\n" +
                "4.2/2017107S-1\n" +
                "4.9/2020266S\n" +
                "4.7/2022026S-1\n" +
                "4.4/2021204S\n" +
                "4.5/2021343S\n" +
                "4.5/2022127S\n" +
                "4.3/2020259S\n" +
                "4.9/2022201S-1\n" +
                "4.9/2019003S-2\n" +
                "4.2/2018259Y-1-4\n" +
                "4.3/2019211S\n" +
                "4.2/2022098S-2-1\n" +
                "4.2/2021041S\n" +
                "4.2/2022193S-1\n" +
                "4.2/2021250S-3\n" +
                "4.6/2020282S\n" +
                "4.1/2022205S-1\n" +
                "4.2/2022076S\n" +
                "4.2/2018188Y-1\n" +
                "4.3/2020347S-1\n" +
                "4.9/2022123S\n" +
                "4.7/2021168S-7\n" +
                "4.2/2020170Y-2\n" +
                "4.9/2022195S-1\n" +
                "4.1/2021327S-3\n" +
                "4.5/2022008S\n" +
                "4.4/2021055S\n" +
                "4.7/2021126S\n" +
                "4.5/2022095S\n" +
                "4.5/2022044S\n" +
                "4.5/2021100Y\n" +
                "4.1/0000000S\n" +
                "4.2/2019070S\n" +
                "4.5/2022145S\n" +
                "4.2/2021608S-1\n" +
                "4.4/2022139S\n" +
                "4.2/2022186S-1\n" +
                "4.2/2021211S-2\n" +
                "4.5/2021008S\n" +
                "4.1/2020159Y-6\n" +
                "4.6/2021095Y\n" +
                "4.4/2021253S\n" +
                "4.5/2022111S\n" +
                "4.6/2021026Y\n" +
                "4.1/2022081S\n" +
                "4.9/2021154S\n" +
                "4.5/2020025S-1\n" +
                "4.5/2022023S\n" +
                "4.5/2021091S\n" +
                "4.5/2022024S\n" +
                "4.2/2022037S-6\n" +
                "4.4/2022004S-1\n" +
                "4.6/2022088Y-3\n" +
                "4.2/2021156S\n" +
                "4.3/2020111Y-1\n" +
                "4.2/2017303S\n" +
                "4.9/2021308S\n" +
                "4.2/2021218S\n" +
                "4.2/2019258S\n" +
                "4.2/2022052S\n" +
                "4.6/2015015S\n" +
                "4.2/2022021S\n" +
                "4.5/2020063Y\n" +
                "4.5/2020075S\n" +
                "4.2/2022173S-1\n" +
                "4.2/2020169S-4\n" +
                "4.2/2022118S\n" +
                "4.4/2022255S-1\n" +
                "4.9/2020122S-2\n" +
                "4.2/2018188Y\n" +
                "4.9/2021073S\n" +
                "4.4/2021233S\n" +
                "4.3/2020368S-2\n" +
                "4.4/2022115S\n" +
                "4.4/2019260S\n" +
                "4.7/2021085Y-4\n" +
                "4.2/2021075Y\n" +
                "4.2/2020280S\n" +
                "4.2/2022144S-2\n" +
                "4.9/2021004S\n" +
                "4.6/2022152S\n" +
                "4.7/2020379S-1\n" +
                "4.9/2022216S-1\n" +
                "4.6/2022113S-1\n" +
                "4.9/2020245S\n" +
                "4.5/2022207S-1\n" +
                "4.5/2022007S\n" +
                "4.2/2022075S\n" +
                "4.2/2020169S-2\n" +
                "4.2/2022073S\n" +
                "4.1/2022060S\n" +
                "4.5/2021139Y\n" +
                "4.2/2021201S-2\n" +
                "4.9/2021304S-2\n" +
                "4.7/2020136S\n" +
                "4.2/2021607S\n" +
                "4.2/2021334S\n" +
                "4.4/2020271S\n" +
                "4.2/2020220S-1\n" +
                "4.7/2016525S\n" +
                "4.5/2021200S\n" +
                "4.3/2020111Y-2\n" +
                "4.2/2022010S\n" +
                "4.2/2021322S-2\n" +
                "4.9/2020357S\n" +
                "4.2/2019258S-1\n" +
                "4.5/2020073S、4.5/2020093S、4.5/2020094S-1\n" +
                "4.6/2021077Y\n" +
                "4.2/2022037S-8\n" +
                "4.1/2022032S\n" +
                "4.1/2021205S\n" +
                "4.1/2022172S-2\n" +
                "4.5/2022167Y-1\n" +
                "4.2/2019322S-2\n" +
                "4.5/2020029S\n" +
                "4.6/2022088Y-2\n" +
                "4.7/2021289S\n" +
                "4.5/2020156S\n" +
                "4.3/2017178Y\n" +
                "4.4/2022179S-6\n" +
                "4.4/2022070S-2\n" +
                "4.4/2021341S-4\n" +
                "4.2/2022137S-6\n" +
                "4.5/2020116S\n" +
                "4.1/2022252S-1\n" +
                "4.2/2021178S\n" +
                "4.1/2019098S-1\n" +
                "4.2/2022137S-5\n" +
                "4.7/2022171S-1\n" +
                "4.3/2018082Y\n" +
                "4.4/2022199S-1\n" +
                "4.4/2021119S\n" +
                "4.2/2022071S\n" +
                "4.2/2022267S-1\n" +
                "4.5/2021040S\n" +
                "4.5/2021317S-1\n" +
                "4.2/2022137S-4\n" +
                "4.4/2022117S\n" +
                "4.2/2018214S\n" +
                "4.5/2021114S-1\n" +
                "4.2/2022138S-2\n" +
                "4.5/2014096S\n" +
                "4.2/2021201S-3\n" +
                "4.4/2021254S\n" +
                "4.2/2022048S\n" +
                "4.2/2021266S\n" +
                "4.2/2022078S-2\n" +
                "4.5/2021335S\n" +
                "4.4/2021161S\n" +
                "4.1/2019017S\n" +
                "4.2/2020200S\n" +
                "4.5/2021076S-2\n" +
                "4.5/2021357S\n" +
                "4.1/2019098S\n" +
                "4.3/2022058Y-2\n" +
                "4.2/2021185S-4\n" +
                "4.2/2018256S\n" +
                "4.4/2022084S\n" +
                "4.2/2020162S\n" +
                "4.2/2022180S-1\n" +
                "4.3/2017498S-1\n" +
                "4.2/2022209S-1\n" +
                "4.2/2020170Y-3\n" +
                "4.5/2018096S\n" +
                "4.6/2019187S\n" +
                "4.5/2018172S-1\n" +
                "4.9/2022016S\n" +
                "4.2/2018188Y-2\n" +
                "4.6/2021194S\n" +
                "4.7/2021168S-1\n" +
                "4.5/2016300S\n" +
                "4.5/2017050S\n" +
                "4.1/2020008S\n" +
                "4.4/2020320S\n" +
                "4.2/2022134Y\n" +
                "4.3/2017178S-2\n" +
                "4.1/2022172S-1\n" +
                "4.1/2020354S\n" +
                "4.4/2021203S\n" +
                "4.2/2022225S\n" +
                "4.7/2022034S";


        System.out.println(str1.split("\\n").length);

    String str2 = "4.1/2022172S-1\n" +
            "4.3/2021046S\n" +
            "4.2/2021350S\n" +
            "4.2/2022137S-6\n" +
            "4.2/2022027S\n" +
            "4.5/2021273S\n" +
            "4.4/2021161S\n" +
            "4.6/2022088Y-5\n" +
            "4.5/2020184Y\n" +
            "4.1/2022252S-1\n" +
            "4.4/2022179S-6\n" +
            "4.5/2011156S-2\n" +
            "4.2/2022078S-1\n" +
            "4.5/2022025S-1\n" +
            "4.2/2021608S-1\n" +
            "4.4/2021119S\n" +
            "4.7/2021124S-2\n" +
            "4.9/2022100S\n" +
            "4.5/2022006S\n" +
            "4.5/2020025S-1\n" +
            "4.2/2019142Y-1\n" +
            "4.5/2016300S\n" +
            "4.1/2021205S\n" +
            "4.5/2022127S\n" +
            "4.4/2021094S\n" +
            "4.2/2022138S-2\n" +
            "4.3/2021620Y\n" +
            "4.9/2021259Y-1\n" +
            "4.2/2022134Y\n" +
            "4.9/2021004S\n" +
            "4.2/2020264S\n" +
            "4.2/2022125S\n" +
            "4.7/2018253S\n" +
            "4.5/2021139Y\n" +
            "4.5/2021317S\n" +
            "4.2/2019154S-1\n" +
            "4.2/2021099S-5\n" +
            "4.7/2021289S-1\n" +
            "4.9/2021154S\n" +
            "4.7/2019088Y\n" +
            "4.4/2021203S\n" +
            "4.3/2017178S-2\n" +
            "4.5/2019325S\n" +
            "4.5/2020390S\n" +
            "4.4/2021233S\n" +
            "4.7/2016525S\n" +
            "4.2/2019258S\n" +
            "4.7/2022034S\n" +
            "4.2/2021201S-2\n" +
            "4.9/2021325S\n" +
            "4.7/2021289S\n" +
            "4.2/2018188Y\n" +
            "4.9/2020053S\n" +
            "4.8/2015096S\n" +
            "4.5/2021008S\n" +
            "4.52021275S\n" +
            "4.7/2021085Y-4\n" +
            "4.2/2022209S-1\n" +
            "4.1/2022032S\n" +
            "4.4/2021253S\n" +
            "4.2/2022212S-1\n" +
            "4.5/2018075S-1\n" +
            "4.3/2020095S\n" +
            "4.2/2021041S\n" +
            "4.2/2021211S-2\n" +
            "4.5/2020156S\n" +
            "4.9/2021304S-2\n" +
            "4.2/2018256S\n" +
            "4.2/2020170Y-2\n" +
            "4.4/2022063S\n" +
            "4.9/2020245S\n" +
            "4.5/2021114S-1\n" +
            "4.4/2022084S\n" +
            "4.9/2021192S\n" +
            "4.5/2020326Y\n" +
            "4.5/2020029S\n" +
            "4.2/2017303S\n" +
            "4.5/2020028S\n" +
            "4.4/2021341S\n" +
            "4.5/2021056S-10\n" +
            "4.9/20220012S\n" +
            "4.4/2021253S-2\n" +
            "4.5/2022145S\n" +
            "4.4/2022004S-1\n" +
            "4.2/2022073S\n" +
            "4.4/2021204S\n" +
            "4.2/2021218S\n" +
            "4.2/2020220S-1\n" +
            "4.1/2019098S\n" +
            "4.3/2017498S-1\n" +
            "4.2/2021240S-3\n" +
            "4.3/2020055S-1\n" +
            "4.2/2022267S-1\n" +
            "4.3/2017178Y\n" +
            "4.2/2022253Y-1\n" +
            "4.4/2022115S\n" +
            "4.3/2022058Y-3\n" +
            "4.3/2021329S\n" +
            "4.5/2022024S\n" +
            "4.7/2019309S-4\n" +
            "4.1/2022205S-1\n" +
            "4.5/2022104S\n" +
            "4.2/2020170Y-1\n" +
            "4.1/2019017S\n" +
            "4.2/2021178S\n" +
            "4.7/2021074S\n" +
            "4.2/2019322S-2\n" +
            "4.7/2022171S-1\n" +
            "4.5/2022111S\n" +
            "4.4/2022116S\n" +
            "4.6/2022152S\n" +
            "4.5/2020002S\n" +
            "4.3/2022058Y-2\n" +
            "4.5/2022008S\n" +
            "4.5/2021091S\n" +
            "4.7/2020379S-1\n" +
            "4.2/2020162S\n" +
            "4.2/2022276S-1\n" +
            "4.5/2018148S\n" +
            "4.2/2021201S-3\n" +
            "4.9/2022216S-1\n" +
            "4.2/2022062S\n" +
            "4.5/2020073S、4.5/2020093S、4.5/2020094S-1\n" +
            "4.9/2020357S\n" +
            "4.3/2020404S\n" +
            "4.5/2021200S\n" +
            "4.7/2022141S\n" +
            "4.3/2020259S\n" +
            "4.2/2019048Y\n" +
            "4.2/2019258S-1\n" +
            "4.4/2022164S\n" +
            "4.5/2019146S\n" +
            "4.2/2022161S-1\n" +
            "4.2/2022052S\n" +
            "4.5/2022188Y-1\n" +
            "4.5/2022167Y-1\n" +
            "4.5/2021040S\n" +
            "4.4/2022070S-2\n" +
            "4.5/2021335S\n" +
            "4.7/2022029S\n" +
            "4.2/2021276S\n" +
            "4.3/2020111Y-1\n" +
            "4.4/2022117S\n" +
            "4.2/2022184S-1\n" +
            "4.5/2022226S-1\n" +
            "4.2/2022168Y-1\n" +
            "4.5/2014096S\n" +
            "4.9/2020266S\n" +
            "4.2/2022173S-1\n" +
            "4.2/2021080Y\n" +
            "4.6/2021077Y\n" +
            "4.2/2021087Y\n" +
            "4.2/2022225S\n" +
            "4.5/2022105S\n" +
            "4.2/2020285S-1\n" +
            "4.2/2018213Y\n" +
            "4.7/2022002S\n" +
            "4.6/2020331S\n" +
            "4.5/2020116S\n" +
            "4.5/2022207S-1\n" +
            "4.9/2018065S-1\n" +
            "4.2/2022118S\n" +
            "4.5/2022023S\n" +
            "4.2/2018224Y\n" +
            "4.5/2022007S\n" +
            "4.1/0000000S\n" +
            "4.2/2022133S\n" +
            "4.5/2022191S-1\n" +
            "4.2/2022028S\n" +
            "4.7/2020188S\n" +
            "4.9/2022201S-1\n" +
            "4.2/2021185S-2\n" +
            "4.1/2022172S-2\n" +
            "4.5/2021100Y\n" +
            "4.3/2018267Y-1\n" +
            "4.2/2019070S\n" +
            "4.4/2021162S\n" +
            "4.4/2020271S\n" +
            "4.2/2018213Y-1\n" +
            "4.2/2022193S-1\n" +
            "4.7/2020136S\n" +
            "4.6/2020282S\n" +
            "4.4/2021061S\n" +
            "4.2/2022078S-2\n" +
            "4.1/2022060S\n" +
            "4.2/2021322S-2\n" +
            "4.4/2022199S-1\n" +
            "4.4/2021251S\n" +
            "4.2/2022037S-6\n" +
            "4.1/2019017S-2\n" +
            "4.3/2022059Y\n" +
            "4.2/2020350S-1\n" +
            "4.9/2022123S\n" +
            "4.2/2022180S-1\n" +
            "4.4/2022247S-1\n" +
            "4.2/2018214S\n" +
            "4.4/2021158S\n" +
            "4.2/2022102Y\n" +
            "4.3/2020347S-1\n" +
            "4.1/2022081S\n" +
            "4.6/20202249Y\n" +
            "4.2/2021185S-4\n" +
            "4.5/2021317S-1\n" +
            "4.2/2022037S-8\n" +
            "4.9/2021073S\n" +
            "4.3/2019211S\n" +
            "4.6/2019187S\n" +
            "4.3/2018082Y\n" +
            "4.2/2019701S-4\n" +
            "4.2/2022010S\n" +
            "4.7/2022026S-1\n" +
            "4.2/2022011S\n" +
            "4.1/2020008S\n" +
            "4.2/2018188Y-1\n" +
            "4.4/2022179S-4\n" +
            "4.5/2021349S-1\n" +
            "4.2/2017258S-1\n" +
            "4.4/2021340S\n" +
            "4.2/2021607S\n" +
            "4.4/2021254S\n" +
            "4.2/2019163S-2\n" +
            "4.1/2020354S\n" +
            "4.2/2018188Y-2\n" +
            "4.2/2021266S\n" +
            "4.5/2022239S-2\n" +
            "4.9/2022195S-1\n" +
            "4.9/2021176S\n" +
            "4.3/2019229S\n" +
            "4.5/2017207S\n" +
            "4.1/2020159Y-6\n" +
            "4.7/2022035S-2\n" +
            "4.3/2020111Y-2\n" +
            "4.5/2021110S\n" +
            "4.6/2021026Y\n" +
            "4.5/2020140S\n" +
            "4.5/2021348S\n" +
            "4.9/2021308S\n" +
            "4.2/2020061S\n" +
            "4.6/2021354S\n" +
            "4.1/2021327S-3\n" +
            "4.2/2020200S\n" +
            "4.5/2019324S\n" +
            "4.6/2022088Y-2\n" +
            "4.5/2022095S\n" +
            "4.2/2022037S-4\n" +
            "4.2/2022087S\n" +
            "4.2/2022071S\n" +
            "4.2/2020144S-5\n" +
            "4.2/2020280S\n" +
            "4.5/2018096S\n" +
            "4.5/2020075S\n" +
            "4.4/2022139S\n" +
            "4.7/2021168S-1\n" +
            "4.2/2018224Y-1\n" +
            "4.1/2022198S-1\n" +
            "4.6/2022113S-1\n" +
            "4.7/2021126S\n" +
            "4.3/2020368S-2\n" +
            "4.5/2020079S\n" +
            "4.2/2021156S\n" +
            "4.5/2018172S-1\n" +
            "4.5/2020253S\n" +
            "4.4/2020320S\n" +
            "4.5/2022025S-2\n" +
            "4.5/2017050S\n" +
            "4.2/2021075Y\n" +
            "4.3/2022058Y-1\n" +
            "4.9/2022016S\n" +
            "4.2/2021226S\n" +
            "4.2/2022021S\n" +
            "4.4/2022255S-1\n" +
            "4.9/2022053S\n" +
            "4.6/2021095Y\n" +
            "4.1/2022204S-1\n" +
            "4.2/2022048S\n" +
            "4.2/2022099S\n" +
            "4.2/2022076S\n" +
            "4.2/2020161Y\n" +
            "4.2/2020221S\n" +
            "4.7/2021168S-7\n" +
            "4.2/2022143S-1\n" +
            "4.2/2021030S\n" +
            "4.6/2020288S\n" +
            "4.4/2021341S-4\n" +
            "4.4/2019260S\n" +
            "4.9/2021291S-1\n" +
            "4.6/2022088Y-3\n" +
            "4.2/2022137S-5\n" +
            "4.2/2021334S\n" +
            "4.2/2022186S-1\n" +
            "4.1/2019098S-1\n" +
            "4.2/2022126S\n" +
            "4.5/2021357S\n" +
            "4.2/2019154S-2\n" +
            "4.6/2021194S\n" +
            "4.9/2019003S-2\n" +
            "4.5/2020063Y\n" +
            "4.5/2021343S\n" +
            "4.9/2020122S-2\n" +
            "4.2/2020061S-2\n" +
            "4.2/2022075S\n" +
            "4.7/2018092Y\n" +
            "4.4/2021055S\n" +
            "4.4/2022083S-1\n" +
            "4.2/2022137S-4\n" +
            "4.5/2022044S\n" +
            "4.2/2021250S-3\n" +
            "4.2/2022144S-2\n" +
            "4.6/2015015S\n" +
            "4.5/2021239S\n" +
            "4.2/2021240S-2\n" +
            "4.2/2020170Y-3";
        List<String> list = Arrays.asList(str1.split("\\n"));
        List<String> list2 = Arrays.asList(str2.split("\\n"));

        list.forEach(e -> {
            boolean contains = list2.contains(e);
            if(!contains)
                System.out.println(e);


        });




        //String table = "ofc_remarks_option";
        //for (int i = 0; i < 50; i++) {
        //    System.out.println("insert into "+table+"(id) values("+i+");");
        //}


        int i = 1/0;

//        areaMajor();
//        mainArea();
//        mainMajor();
//        mainDept();
//        mainMonth();

//            deptGen();
//            deptGenMonth();

//        receivableDept();
//        receivableMonth();
    }


    private static void mainMonth(){
        String year ="2021";

        String data = "1264.05 \t1499.31 \t3208.80 \t1944.76 \t3188.19 \t3722.00 \t2359.09 \t2306.21 \t6024.21 \t1059.10 \t1431.93 \t40704.48 \n" +
                "1835.90 \t4073.11 \t2857.35 \t3021.29 \t1680.57 \t3189.24 \t2244.20 \t2012.51 \t1630.64 \t7345.26 \t2124.91 \t5587.16 \n" +
                "0.00 \t0.00 \t0.00 \t6086.83 \t0.00 \t0.00 \t0.00 \t17891.00 \t29063.06 \t0.00 \t0.00 \t45030.51 ";
        String[] split = data.split("\\n");
        for (int i = 0; i < split.length; i++) {
            String[] word = split[i].split("\\t");
            String beanName = "";
            if(0 == i){
                beanName = "head";
            }else if(1 == i){
                beanName = "branch";
            }else if(2 == i){
                beanName = "epc";
            }

            String beanName2 = "";
            if(0 == i){
                beanName2 = "Head";
            }else if(1 == i){
                beanName2 = "Branch";
            }else if(2 == i){
                beanName2 = "Epc";
            }
            System.out.println(
                    String.format("ContractStat.MonthData %sMonthData%s = new ContractStat.MonthData(%s, new ArrayList<>());",
                            beanName,year,year));
            System.out.println(
                    String.format("contractStat.get%sMonthList().add(%sMonthData%s);",
                            beanName2,beanName,year));


            for (int i1 = 0; i1 < word.length; i1++) {

                System.out.println(
                        String.format("%sMonthData%s.getMonthList().add(new ContractReceivableMonthStat(\"%s月\",new BigDecimal(\"%s\")));",
                                beanName,year,i1+1+"",word[i1].trim())
                );

            }





        }





    }






    private static void mainDept(){

        String data = "设计三院\t1\t10128.44359\t10000\n" +
                "设计四院\t1\t9636.966136\t14000\n" +
                "京津分院\t1\t5568.645102\t3800\n" +
                "生产所\t1\t0\t0\n" +
                "\"工程管理部 （不含EPC设计）\"\t1\t98071.3962\t120000\n" +
                "长春\t0\t124.5766\t800\n" +
                "湖北\t0\t7501.23124\t7000\n" +
                "广西\t0\t257.605832\t2500\n" +
                "山东\t0\t1048.810022\t3200\n" +
                "广州\t0\t8212.737405\t8000\n" +
                "西安\t0\t1107.2224\t1600\n" +
                "合肥\t0\t2132.127174\t2500\n" +
                "漳州\t0\t525.501\t1200\n" +
                "重庆\t0\t2239.995255\t2200\n" +
                "内蒙\t0\t68.5\t300\n" +
                "上海\t0\t2229.1129\t2200\n" +
                "苏州\t0\t3539.0698\t3000\n" +
                "温州\t0\t152.54\t800\n" +
                "新疆\t0\t902.4521\t2000\n" +
                "成都\t0\t684.32\t800\n" +
                "第一分院\t0\t92\t800\n" +
                "检测中心\t0\t191.1\t0";

        for (String s : data.split("\\n")) {
            String[] words = s.split("\\t");
            System.out.println(
                    String.format("deptCompleteContractList.add(new ContractDeptStat(\"%s\",%s,(short)%s,%s ));",
                            words[0].trim(),
                            getString(words[3]),
                            words[1].trim(),
                            getString(words[2]))
            );


        }




    }

    private static void deptGenMonth(){
        String data = "一院\t806.708296\t2008.77031\t432.0378\t381.71059\t483.170577\t839.71615\t384.4491\t623.7964\t1371.43056\t498.1998\t764.010417\n" +
                "二院\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
                "三院\t609.13989\t1577.926945\t236.565\t30.9518\t112.41\t436.946\t38.7993\t46.38\t396.7496\t735.9071\t1605.224365\n" +
                "四院\t641.9715\t2344.054503\t17.45\t270.31432\t400\t1318.1821\t143.29\t162.62\t1269.277266\t494.518814\t674.321497\n" +
                "五院\t170.817\t395.41532\t42.74096\t88.956\t154.308\t833.86\t29.70657\t61.778\t155.357\t135.777807\t179.283343\n" +
                "六院\t53.228\t285.135218\t0\t0\t3.5\t0\t18.915068\t0\t0\t2.9393\t10.282414\n" +
                "设计七院\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
                "高质量\t3\t71.676\t102\t0\t1\t0\t49.335\t0\t9.9\t0\t100.089\n" +
                "京津分院\t330.18\t131.0126\t36.2927\t28.5\t4.77\t0\t34.9\t15\t0\t48.402\t347.9427\n" +
                "EPC\t9528 \t12106 \t409 \t0 \t194 \t2377 \t791 \t963 \t1661 \t1165 \t10432 ";
        for (String s : data.split("\\n")) {
            String[] words = s.split("\\t");
            String beanName =getPinYin(getChinese( words[0].trim() ));
            if(words.length != 13)
                throw new IllegalArgumentException();

            for (int i = 1; i < words.length; i++) {
                System.out.println(
                        String.format("%s.getReceivableMonthList().add(new ContractReceivableMonthStat(\"%s月\",new BigDecimal(%s)));",
                                beanName,i+"",words[i].trim())
                );


            }


        }



    }

    private static void receivableMonth(){

        String data1 = "12143.49507\t18919.73775\t1275.888178\t800.43271\t1352.858577\t5806.123954\t1490.699458\t1872.5114\t4864.0977\t1825.589504\t3080.904821\t12287.66088";
        String data2 = "2542.028\t3964\t1897.143\t1578.82\t884.004\t1683.23\t1127\t881\t1537\t819\t1705\t3631.91903";

        String[] split1 = data1.split("\\t");
        String[] split2 = data2.split("\\t");
        for (int i = 0; i < split1.length; i++) {
            System.out.println(
                    String.format("monthList.add(new ContractReceivableMonthStat(\"%s月\",new BigDecimal(\"%s\").add(new BigDecimal(\"%s\"))));",
                            i+1+"",split1[i].trim(),split2[i].trim())
            );
        }

    }

    private static void deptGen(){

        String data = "一院\t13265 \t9822 \t11250\t8594\t9200\t5354 \t4415.955827\t6294.259808\t~\t~\t~\t6774\n" +
                "二院\t10 \t25 \t~\t~\t1710\t6274 \t3984.36618\t24.97823892\t~\t~\t~\t5954\n" +
                "三院\t8890 \t7925 \t7400\t5827\t5200\t6656 \t4412.676199\t4746.242487\t10128.44359\t10260.31992\t10000\t8682\n" +
                "四院\t14380 \t10215 \t10000\t7736\t7000\t11329 \t5726.692594\t5596.158842\t9636.966136\t10950.9934\t14000\t12865\n" +
                "五院\t2394 \t2666 \t3000\t2248\t2300\t2462\t1829\t1846\t~\t~\t~\t2575\n" +
                "六院\t266 \t1312 \t1900\t374\t1400\t1723 \t1180.677781\t284\t~\t~\t~\t599\n" +
                "设计七院\t1456 \t1360 \t1250\t~\t900\t~\t~\t691\t~\t~\t~\t~\n" +
                "高质量\t248 \t246 \t~\t337\t~\t~\t~\t362\t~\t~\t~\t~\n" +
                "京津分院\t2882 \t2354 \t2850\t977\t2000\t1244 \t1076.357366\t854\t5568.645102\t26869.14811\t3800\t1967\n" +
                "其他\t0 \t73 \t~\t~\t~\t11 \t~\t~\t~\t~\t~\t0\n" +
                "BIM\t0 \t151 \t~\t~\t~\t~\t~\t~\t~\t~\t~\t~\n" +
                "广州分院（佛山）\t0 \t6555 \t5500\t4541\t4000\t5278.187276\t4742\t4541\t8212.737405\t8333.72005\t8000\t2314 \n" +
                "广西分院+\t1672 \t1672 \t1300\t1507\t1300\t2077.46114\t1214\t1507\t257.605832\t275.605832\t2500\t5427 \n" +
                "合肥分院\t1959 \t1959 \t1800\t1209\t1500\t1575.234\t816\t1209\t2132.127174\t2136.127174\t2500\t2160 \n" +
                "湖北分院+\t5904 \t5904 \t4500\t4725.58403\t3500\t758.9815\t3103\t4725.58403\t7501.23124\t8173.181929\t7000\t119 \n" +
                "内蒙古分院\t233 \t233 \t150\t150.56\t100\t15.78849\t12.56\t150.56\t68.5\t68.5\t300\t1498 \n" +
                "山东分院\t1572 \t1572 \t2000\t1518\t1700\t2075.55108\t1557\t1518\t1048.810022\t1191.981022\t3200\t2501 \n" +
                "上海分院\t959 \t959 \t1200\t729\t900\t691.6576\t616\t729\t2229.1129\t2535.0129\t2200\t153 \n" +
                "四川分院\t0 \t0 \t0\t~\t~\t0\t~\t~\t~\t~\t~\t~\n" +
                "苏州分院\t2871 \t2871 \t1500\t2166\t1200\t887.2176976\t1760\t2166\t3539.0698\t7584.136339\t3000\t1028 \n" +
                "温州分院\t99 \t99 \t500\t172\t400\t168.65864\t106\t172\t152.54\t152.54\t800\t1594 \n" +
                "西安分院\t1771 \t1771 \t1000\t1007\t800\t876.494\t2110\t1007\t1107.2224\t1878.6124\t1600\t7313 \n" +
                "新疆分院\t1227 \t1227 \t1300\t782\t900\t293.03\t224\t782\t902.4521\t1330.282354\t2000\t355 \n" +
                "漳州分院+\t628 \t628 \t800\t571\t600\t746.418345\t367\t571\t525.501\t581.327\t1200\t2032 \n" +
                "长春分院\t523 \t523 \t600\t608\t600\t55.059398\t454\t608\t124.5766\t136.5766\t800\t0 \n" +
                "重庆分院\t1466 \t1466 \t1300\t2062\t1000\t796.0974876\t548\t2062\t2239.995255\t2247.375255\t2200\t1025 \n" +
                "云南分院\t0 \t0 \t~\t~\t~\t25\t~\t~\t~\t~\t~\t~\n" +
                "成都分院\t213 \t213 \t600\t252\t400\t179.69\t0\t252\t92\t92\t800\t5176 \n" +
                "第一分院\t428 \t428 \t600\t250\t400\t732.144\t350\t250\t~\t~\t~\t988 \n" +
                "道三\t6 \t6 \t~\t~\t~\t472.36\t~\t~\t~\t~\t~\t~";
        String[] lines = data.split("\\n");
        for (int i = 0; i < lines.length; i++) {
            String[] words = lines[i].split("\\t");
            String beanName =getPinYin(getChinese( words[0].trim() ));
            System.out.println(
                    String.format("ContractDeptStat %s = new ContractDeptStat(\"%s\", %s,%s, %s, %s, %s,%s,%s,%s,%s,%s,%s,%s);",
                            beanName,words[0].trim(),
                            getString(words[1]),
                            getString(words[2]),
                            getString(words[3]),
                            getString(words[4]),
                            getString(words[5]),
                            getString(words[6]),
                            getString(words[7]),
                            getString(words[8]),
                            getString(words[9]),
                            getString(words[10]),
                            getString(words[11]),
                            getString(words[12])
                    )
                    );
                    System.out.println( String.format("list.add(%s);", beanName) );
        }






    }

    public static String getChinese(String paramValue) {
        String regex = "([\u4e00-\u9fa5]+)";
        String str = "";
        Matcher matcher = Pattern.compile(regex).matcher(paramValue);
        while (matcher.find()) {
            str+= matcher.group(0);
        }
        return str;
    }

    /**
     * 获取中文全拼
     *
     * @param src
     * @return
     */
    private static String getPinYin(String src) {
        char[] t1 = null;
        t1 = src.toCharArray();
        String[] t2 = new String[t1.length];
        HanyuPinyinOutputFormat t3 = new HanyuPinyinOutputFormat();
        t3.setCaseType(HanyuPinyinCaseType.LOWERCASE);
        t3.setToneType(HanyuPinyinToneType.WITHOUT_TONE);
        t3.setVCharType(HanyuPinyinVCharType.WITH_V);
        String t4 = "";
        int t0 = t1.length;
        try {
            for (int i = 0; i < t0; i++) {
                // 判断是否为汉字字符
                if (java.lang.Character.toString(t1[i]).matches("[\\u4E00-\\u9FA5]+")) {
                    t2 = PinyinHelper.toHanyuPinyinStringArray(t1[i], t3);
                    t4 += t2[0];
                } else {
                    t4 += java.lang.Character.toString(t1[i]);
                }
            }
            return t4;
        } catch (BadHanyuPinyinOutputFormatCombination e1) {
            e1.printStackTrace();
        }
        return t4;
    }

    /**
     * 获取中文拼音首字母
     *
     * @param str
     * @return
     */
    private String getPinYinHeadChar(String str) {
        String convert = "";
        for (int j = 0; j < str.length(); j++) {
            char word = str.charAt(j);
            String[] pinyinArray = PinyinHelper.toHanyuPinyinStringArray(word);
            if (pinyinArray != null) {
                convert += pinyinArray[0].charAt(0);
            } else {
                convert += word;
            }
        }
        return convert;
    }

    private static String getString(String str){
        str = str.trim();
        if("~".equals(str)){
            return "null";
        }
        return String.format("new BigDecimal(\"%s\")", str.trim());

    }


    private static void receivableDept(){


        String data = "长春\t608\t600\t454\n" +
                "湖北\t4725.58403\t3500\t3103\n" +
                "广西\t1507\t1300\t1214\n" +
                "山东\t1518\t1700\t1557\n" +
                "广州\t4541\t4000\t4742\n" +
                "西安\t1007\t800\t2110\n" +
                "合肥\t1209\t1500\t816\n" +
                "漳州\t571\t600\t367\n" +
                "重庆\t2062\t1000\t548\n" +
                "内蒙\t150.56\t100\t12.56\n" +
                "上海\t729\t900\t616\n" +
                "苏州\t2166\t1200\t1760\n" +
                "温州\t172\t400\t106\n" +
                "新疆\t782\t900\t224\n" +
                "成都\t252\t400\t0\n" +
                "第一分院\t250\t400\t350";
        String[] lineList = data.split("\\n");
        for (String s : lineList) {
            String[] words = s.split("\\t");
            String sss ;
            if(words.length <4){
                sss = "null";
            }else {
                sss = String.format("new BigDecimal(%s)", words[3]);

            }
            System.out.println(
                    String.format("deptList.add(new ContractReceivableDeptStat(\"%s\",new BigDecimal(%s),(short)0,%s,new BigDecimal(%s)));",
                    words[0].trim(),words[1].trim(),sss,words[2].trim())
            );
        }



    }


    private static void dept(){


        String s1 = "ContractDeptStat contractDeptStat%s = new ContractDeptStat();";
        String s2 = "contractDeptStat%s.setDeptName(\"%s\");";
        String s3 = "contractDeptStat%s.setSignedAmount(new BigDecimal(%s));";
        String s4 = "contractDeptStat%s.setTargetBusinessIncome(new BigDecimal(%s));";
        String s5 = "List<ContractDeptStat> monthStatList%s = new ArrayList<>();";
        String s6 = "contractDeptStat%s.setMonthStatList(monthStatList%s);";
        String s7 = "ContractDeptStat monthDeptStat%s = new ContractDeptStat();";
        String s8 = "monthDeptStat%s.setBusinessIncome(new BigDecimal(%s));";

        String data1 = "设计三院\n" +
                "设计四院\n" +
                "京津分院\n" +
                "生产所\n" +
                "工程管理部 (不含EPC设计）\n" +
                "长春\n" +
                "湖北\n" +
                "广西\n" +
                "山东\n" +
                "广州\n" +
                "西安\n" +
                "合肥\n" +
                "漳州\n" +
                "重庆\n" +
                "内蒙\n" +
                "上海\n" +
                "苏州\n" +
                "温州\n" +
                "新疆\n" +
                "成都\n" +
                "第一分院\n" +
                "检测中心";

        String data2 = "10128.44 \t10000.00 \n" +
                "9636.97 \t14000.00 \n" +
                "5568.65 \t3800.00 \n" +
                "0.00 \t0.00 \n" +
                "98071.40 \t120000.00 \n" +
                "124.58 \t800\n" +
                "7501.23 \t7000\n" +
                "257.61 \t2500\n" +
                "1048.81 \t3200\n" +
                "8212.74 \t8000\n" +
                "1107.22 \t1600\n" +
                "2132.13 \t2500\n" +
                "525.50 \t1200\n" +
                "2240.00 \t2200\n" +
                "68.50 \t300\n" +
                "2229.11 \t2200\n" +
                "3539.07 \t3000\n" +
                "152.54 \t800\n" +
                "902.45 \t2000\n" +
                "684.32 \t800\n" +
                "92.00 \t800\n" +
                "191.10 \t0";

        String data3 = "112.04 \t111.23 \t1424.54 \t220.74 \t534.80 \t1043.12 \t418.50 \t1296.84 \t789.19 \t56.00 \t430.43 \t3822.89 \n" +
                "80.80 \t89.64 \t1116.81 \t87.78 \t1722.46 \t457.40 \t0.00 \t262.24 \t3037.42 \t117.96 \t91.00 \t3887.48 \n" +
                "11.98 \t140.00 \t15.45 \t8.00 \t124.78 \t80.00 \t789.83 \t54.88 \t0.00 \t207.74 \t0.00 \t25436.49 \n" +
                "1059.23 \t1158.44 \t652.00 \t1628.24 \t806.15 \t2141.49 \t1150.76 \t692.25 \t2197.60 \t677.40 \t910.50 \t7557.62 \n" +
                "0.00 \t0.00 \t0.00 \t6086.83 \t0.00 \t0.00 \t0.00 \t17891.00 \t29063.06 \t0.00 \t0.00 \t45030.51 \n" +
                "0.00 \t0.00 \t95.00 \t0.00 \t12.00 \t0.00 \t0.00 \t0.00 \t14.16 \t0.00 \t0.00 \t15.42 \n" +
                "520.27 \t31.23 \t1291.76 \t1198.42 \t349.93 \t463.51 \t0.00 \t1069.55 \t520.34 \t476.12 \t1314.99 \t937.07 \n" +
                "0.00 \t0.00 \t18.00 \t0.00 \t0.00 \t76.94 \t0.00 \t0.00 \t0.00 \t90.13 \t0.00 \t90.53 \n" +
                "0.00 \t0.00 \t14.25 \t5.00 \t0.00 \t50.15 \t29.21 \t221.34 \t17.54 \t506.64 \t127.72 \t220.14 \n" +
                "207.72 \t660.79 \t0.00 \t0.00 \t0.00 \t961.25 \t443.07 \t92.71 \t30.66 \t4274.10 \t9.20 \t1654.21 \n" +
                "113.80 \t163.00 \t199.95 \t223.50 \t45.00 \t343.04 \t443.60 \t120.00 \t12.00 \t0.00 \t205.22 \t9.50 \n" +
                "8.50 \t244.60 \t67.00 \t480.00 \t0.00 \t81.95 \t30.50 \t154.60 \t0.00 \t674.00 \t124.98 \t270.00 \n" +
                "64.72 \t47.70 \t341.54 \t1.19 \t0.00 \t0.00 \t42.34 \t39.30 \t8.20 \t0.00 \t3.53 \t32.81 \n" +
                "15.80 \t167.83 \t228.25 \t84.80 \t120.36 \t0.00 \t554.64 \t0.00 \t0.00 \t662.79 \t0.00 \t412.91 \n" +
                "0.00 \t0.00 \t38.50 \t0.00 \t0.00 \t0.00 \t0.00 \t0.00 \t0.00 \t0.00 \t0.00 \t30.00 \n" +
                "596.49 \t99.20 \t86.91 \t758.72 \t317.79 \t0.00 \t105.51 \t30.80 \t49.20 \t279.80 \t3.50 \t207.10 \n" +
                "308.60 \t2653.76 \t122.09 \t93.92 \t702.92 \t822.45 \t557.80 \t249.21 \t729.31 \t451.07 \t240.77 \t652.23 \n" +
                "0.00 \t0.00 \t0.00 \t0.00 \t77.77 \t8.65 \t20.64 \t0.00 \t0.00 \t0.00 \t14.20 \t31.28 \n" +
                "0.00 \t5.00 \t7.27 \t175.75 \t\t381.30 \t16.90 \t35.00 \t58.12 \t130.67 \t79.80 \t440.47 \n" +
                "0.00 \t0.00 \t246.82 \t0.00 \t54.80 \t0.00 \t0.00 \t0.00 \t0.00 \t0.00 \t1.00 \t391.50 \n" +
                "0.00 \t0.00 \t0.00 \t0.00 \t0.00 \t0.00 \t0.00 \t0.00 \t0.00 \t0.00 \t0.00 \t92.00 \n" +
                "0.00 \t0.00 \t0.00 \t0.00 \t0.00 \t0.00 \t0.00 \t0.00 \t191.10 \t0.00 \t0.00 \t0.00 ";

        String[] split1 = data1.split("\\n");
        String[] split2 = data2.split("\\n");
        String[] split3 = data3.split("\\n");

        for (int i = 0; i < split1.length; i++) {
            String[] amonts = split2[i].split("\\t");
            System.out.println(String.format(s1, i+""));
            System.out.println(String.format("statList.add(contractDeptStat%s);", i+""));
            System.out.println(String.format(s2,i, split1[i].trim()));
            System.out.println(String.format(s3,i, amonts[0].trim()));
            System.out.println(String.format(s4,i, amonts[1].trim()));
            System.out.println(String.format(s5, i+""));
            System.out.println(String.format(s6, i+"",i+""));


            String[] months = split3[i].split("\\t");
            for (int j = 0; j < months.length; j++) {
                System.out.println(String.format(s7, i+"_"+j));
                System.out.println(String.format(s8, i+"_"+j,months[j].trim()));
                System.out.println(String.format("monthDeptStat%s.setMonth((short)%s);", i+"_"+j,j+1+""));
                System.out.println(String.format("monthStatList%s.add(monthDeptStat%s);",i+"",i+"_"+j+"" ));

            }




        }








    }

    private static void mainMajor(){

        String s = "majorContractList.add(new ContractMajor(\"%s\",\"%s\",%s,new BigDecimal(%s)));";

        String data = "传统水务\t384\t39208.37735\n" +
                "道桥遂\t413\t37207.32661\n" +
                "风景园林\t129\t6448.55829\n" +
                "水环境\t55\t2898.715234\n" +
                "建筑\t170\t7821.285733\n" +
                "燃气热力\t49\t922.070843\n" +
                "市政综合\t73\t11807.9933";

        Map<String,String> map = new HashMap<>();
        map.put("传统水务","SCGW");
        map.put("道桥遂","LQS");
        map.put("风景园林","JGYL");
        map.put("水环境","SHJ");
        map.put("建筑","JZ");
        map.put("燃气热力","RQRL");
        map.put("其他","QT");
        map.put("市政综合","SZZH");
        for (String s1 : data.split("\\n")) {

            String[] split = s1.split("\\t");

            String[] arr = { map.get(split[0].trim()),split[0].trim(),split[1].trim(),split[2].trim() };
            System.out.println(String.format(s, arr));



        }



    }

    private static void mainArea(){
        String s1 = "区域一部（黄晓东）\n" +
                "区域二部（沈巍）\n" +
                "区域三部（孙鹏）\n" +
                "区域四部（孙鹏）";

        String s2 = "13346.22 \t20600\n" +
                "17918.52 \t20600\n" +
                "32833.28 \t14100\n" +
                "5381.45 \t14700";


        String s = "areaContractList.add(new ContractArea(\"%s\",new BigDecimal(%s),new BigDecimal(%s)));";

        String[] split1 = s1.split("\\n");
        String[] split = s2.split("\\n");

        for (int i = 0; i < split1.length; i++) {
            String s3 = split[i];
            String[] arr = {split1[i].trim(),s3.split("\\t")[0].trim(),s3.split("\\t")[1].trim()};
            System.out.println(String.format(s, arr));
        }






    }

    private static void areaMajor(){

        String s1 = "        ContractArea area%s = new ContractArea();";
        String a1 = "        stat.getAreaContractList().add(area%s);";
        String s2 = "        area%s.setName(\"%s\");";
        String s3 = "        area%s.setContractMajorList(new ArrayList<>());";
        String s4 = "        area%s.getContractMajorList().add(new ContractMajor(\"%s\",\"%s\",%s,new BigDecimal(\"%s\")));";
//        String s4 = "        area%s.getContractMajorList().add(new ContractMajor(\"%s\",\"%s\", \"%s\" ,";


        Map<String,String> map = new HashMap<>();
        map.put("传统水务","SCGW");
        map.put("道桥遂","LQS");
        map.put("风景园林","JGYL");
        map.put("水环境","SHJ");
        map.put("建筑","JZ");
        map.put("燃气热力","RQRL");
        map.put("其他","QT");
        map.put("市政综合","SZZH");

        String name = "4";

        String yuan = "传统水务\t4037.58 \n" +
                "道桥遂\t421.91 \n" +
                "风景园林\t350.10 \n" +
                "水环境\t119.65 \n" +
                "建筑\t445.50 \n" +
                "燃气热力\t6.20 \n" +
                "市政综合\t0.00 ";

        System.out.println(String.format(s1, name));
        System.out.println(String.format(a1, name));
        System.out.println(String.format(s2, name,"区域四部"));
        System.out.println(String.format(s3, name));

        for (String s : yuan.split("\\n")) {
            String[] array = s.split("\\t");
            String[] arr = {name,map.get(array[0].trim()),array[0].trim(),null,array[1].trim()};

            System.out.println(String.format(s4,arr));
        }






    }






    private static String getCodeNum(String designCode){

        if(designCode.contains("/")){
            String[] split = designCode.split("/");
            designCode = "";
            for (String s : split) {
                if(s.length() > designCode.length()){
                    designCode = s;
                }
            }
        }

        if (designCode.contains("-")) {
            String[] split = designCode.split("-");
            designCode = "";
            for (String s : split) {
                if (s.length() > designCode.length()) {
                    designCode = s;
                }
            }
        }
        return getNum( designCode );


    }

    private static String getNum(String str){

        String REGEX = "[^(0-9)]";
        return Pattern.compile(REGEX).matcher(str).replaceAll("").trim();

    }

}
