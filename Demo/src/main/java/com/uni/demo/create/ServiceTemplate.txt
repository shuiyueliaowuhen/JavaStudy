

import com.github.pagehelper.PageHelper;
import com.linkcloud.basic.service.*;
import com.linkcloud.common.model.DataVo;
import com.linkcloud.common.utils.*;
import com.linkcloud.resource.api.RIConst;

import com.linkcloud.resource.model.@value2@.req.@value2@AddReq;
import com.linkcloud.resource.model.@value2@.req.@value2@PageReq;
import com.linkcloud.resource.model.@value2@.vo.@value2@tVo;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;


import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.util.CollectionUtils;
import tk.mybatis.mapper.entity.Example;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@Slf4j
@Service
@RequiredArgsConstructor(onConstructor_ = {@Lazy})
public class ProjectService{


    private final @value2@Mapper @value1@Mapper;

    @Transactional
    public void update(@value2@AddReq req){

        if(ObjectValidUtil.isBlank(req.getId()))
            throw new ServiceException("id必传");

        @value2@ @value1@ = BeanUtils.copyBean(req, @value2@.class);
        CommonDaoUtil.update2(@value1@Mapper,@value1@);

    }

    @Transactional
    public void add(PrjProjectAddReq req){
         @value2@ @value1@ = BeanUtils.copyBean(req, @value2@.class);
         CommonDaoUtil.insert2(@value1@Mapper,@value1@);
    }


    @Transactional
    public void del(String id) {
        CommonDaoUtil.del(@value1@Mapper,new @value2@(id));
    }

    public PrjProjectVo detail(String id) {

        @value2@ @value1@ = @value1@Mapper.selectByPrimaryKey(id);
        @value2@Vo vo = BeanUtils.copyBean(@value1@, @value2@.class);
        return vo;


    }


    public DataVo<@value2@Vo> list(@value2@PageReq req) {

        PageHelper.startPage(req.getPageNum(), req.getPageSize());

        Example example = PageUtil.exampleAndCreateDesc(BeanUtils.copyBean(req,@value2@.class), Collections.emptyList());
        List< @value2@> list =  CommonDaoUtil.list(@value1@Mapper,example);
        return new DataVo<>(list, @value2@Vo.class);

    }


}